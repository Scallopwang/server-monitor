/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.guotai.servermonitorspringboot.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.2)", date = "2021-08-09")
public class Agent implements org.apache.thrift.TBase<Agent, Agent._Fields>, java.io.Serializable, Cloneable, Comparable<Agent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Agent");

  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CPU_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu_free", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField MEMORY_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("memory_free", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField DISK_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("disk_free", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField CPU_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu_total", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField MEMORY_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("memory_total", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField DISK_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("disk_total", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("time_stamp", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AgentStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AgentTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String ip; // optional
  public double cpu_free; // optional
  public double memory_free; // optional
  public double disk_free; // optional
  public double cpu_total; // optional
  public double memory_total; // optional
  public double disk_total; // optional
  public int time_stamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IP((short)1, "ip"),
    CPU_FREE((short)2, "cpu_free"),
    MEMORY_FREE((short)3, "memory_free"),
    DISK_FREE((short)4, "disk_free"),
    CPU_TOTAL((short)5, "cpu_total"),
    MEMORY_TOTAL((short)6, "memory_total"),
    DISK_TOTAL((short)7, "disk_total"),
    TIME_STAMP((short)8, "time_stamp");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IP
          return IP;
        case 2: // CPU_FREE
          return CPU_FREE;
        case 3: // MEMORY_FREE
          return MEMORY_FREE;
        case 4: // DISK_FREE
          return DISK_FREE;
        case 5: // CPU_TOTAL
          return CPU_TOTAL;
        case 6: // MEMORY_TOTAL
          return MEMORY_TOTAL;
        case 7: // DISK_TOTAL
          return DISK_TOTAL;
        case 8: // TIME_STAMP
          return TIME_STAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CPU_FREE_ISSET_ID = 0;
  private static final int __MEMORY_FREE_ISSET_ID = 1;
  private static final int __DISK_FREE_ISSET_ID = 2;
  private static final int __CPU_TOTAL_ISSET_ID = 3;
  private static final int __MEMORY_TOTAL_ISSET_ID = 4;
  private static final int __DISK_TOTAL_ISSET_ID = 5;
  private static final int __TIME_STAMP_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IP,_Fields.CPU_FREE,_Fields.MEMORY_FREE,_Fields.DISK_FREE,_Fields.CPU_TOTAL,_Fields.MEMORY_TOTAL,_Fields.DISK_TOTAL,_Fields.TIME_STAMP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.CPU_FREE, new org.apache.thrift.meta_data.FieldMetaData("cpu_free", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEMORY_FREE, new org.apache.thrift.meta_data.FieldMetaData("memory_free", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DISK_FREE, new org.apache.thrift.meta_data.FieldMetaData("disk_free", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CPU_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("cpu_total", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEMORY_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("memory_total", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DISK_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("disk_total", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("time_stamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "long")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Agent.class, metaDataMap);
  }

  public Agent() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Agent(Agent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    this.cpu_free = other.cpu_free;
    this.memory_free = other.memory_free;
    this.disk_free = other.disk_free;
    this.cpu_total = other.cpu_total;
    this.memory_total = other.memory_total;
    this.disk_total = other.disk_total;
    this.time_stamp = other.time_stamp;
  }

  public Agent deepCopy() {
    return new Agent(this);
  }

  @Override
  public void clear() {
    this.ip = null;
    setCpu_freeIsSet(false);
    this.cpu_free = 0.0;
    setMemory_freeIsSet(false);
    this.memory_free = 0.0;
    setDisk_freeIsSet(false);
    this.disk_free = 0.0;
    setCpu_totalIsSet(false);
    this.cpu_total = 0.0;
    setMemory_totalIsSet(false);
    this.memory_total = 0.0;
    setDisk_totalIsSet(false);
    this.disk_total = 0.0;
    setTime_stampIsSet(false);
    this.time_stamp = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public String getIp() {
    return this.ip;
  }

  public Agent setIp(@org.apache.thrift.annotation.Nullable String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public double getCpu_free() {
    return this.cpu_free;
  }

  public Agent setCpu_free(double cpu_free) {
    this.cpu_free = cpu_free;
    setCpu_freeIsSet(true);
    return this;
  }

  public void unsetCpu_free() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPU_FREE_ISSET_ID);
  }

  /** Returns true if field cpu_free is set (has been assigned a value) and false otherwise */
  public boolean isSetCpu_free() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPU_FREE_ISSET_ID);
  }

  public void setCpu_freeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPU_FREE_ISSET_ID, value);
  }

  public double getMemory_free() {
    return this.memory_free;
  }

  public Agent setMemory_free(double memory_free) {
    this.memory_free = memory_free;
    setMemory_freeIsSet(true);
    return this;
  }

  public void unsetMemory_free() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEMORY_FREE_ISSET_ID);
  }

  /** Returns true if field memory_free is set (has been assigned a value) and false otherwise */
  public boolean isSetMemory_free() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEMORY_FREE_ISSET_ID);
  }

  public void setMemory_freeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEMORY_FREE_ISSET_ID, value);
  }

  public double getDisk_free() {
    return this.disk_free;
  }

  public Agent setDisk_free(double disk_free) {
    this.disk_free = disk_free;
    setDisk_freeIsSet(true);
    return this;
  }

  public void unsetDisk_free() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISK_FREE_ISSET_ID);
  }

  /** Returns true if field disk_free is set (has been assigned a value) and false otherwise */
  public boolean isSetDisk_free() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISK_FREE_ISSET_ID);
  }

  public void setDisk_freeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISK_FREE_ISSET_ID, value);
  }

  public double getCpu_total() {
    return this.cpu_total;
  }

  public Agent setCpu_total(double cpu_total) {
    this.cpu_total = cpu_total;
    setCpu_totalIsSet(true);
    return this;
  }

  public void unsetCpu_total() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPU_TOTAL_ISSET_ID);
  }

  /** Returns true if field cpu_total is set (has been assigned a value) and false otherwise */
  public boolean isSetCpu_total() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPU_TOTAL_ISSET_ID);
  }

  public void setCpu_totalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPU_TOTAL_ISSET_ID, value);
  }

  public double getMemory_total() {
    return this.memory_total;
  }

  public Agent setMemory_total(double memory_total) {
    this.memory_total = memory_total;
    setMemory_totalIsSet(true);
    return this;
  }

  public void unsetMemory_total() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEMORY_TOTAL_ISSET_ID);
  }

  /** Returns true if field memory_total is set (has been assigned a value) and false otherwise */
  public boolean isSetMemory_total() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEMORY_TOTAL_ISSET_ID);
  }

  public void setMemory_totalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEMORY_TOTAL_ISSET_ID, value);
  }

  public double getDisk_total() {
    return this.disk_total;
  }

  public Agent setDisk_total(double disk_total) {
    this.disk_total = disk_total;
    setDisk_totalIsSet(true);
    return this;
  }

  public void unsetDisk_total() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISK_TOTAL_ISSET_ID);
  }

  /** Returns true if field disk_total is set (has been assigned a value) and false otherwise */
  public boolean isSetDisk_total() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISK_TOTAL_ISSET_ID);
  }

  public void setDisk_totalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISK_TOTAL_ISSET_ID, value);
  }

  public int getTime_stamp() {
    return this.time_stamp;
  }

  public Agent setTime_stamp(int time_stamp) {
    this.time_stamp = time_stamp;
    setTime_stampIsSet(true);
    return this;
  }

  public void unsetTime_stamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_STAMP_ISSET_ID);
  }

  /** Returns true if field time_stamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_stamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_STAMP_ISSET_ID);
  }

  public void setTime_stampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_STAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case CPU_FREE:
      if (value == null) {
        unsetCpu_free();
      } else {
        setCpu_free((Double)value);
      }
      break;

    case MEMORY_FREE:
      if (value == null) {
        unsetMemory_free();
      } else {
        setMemory_free((Double)value);
      }
      break;

    case DISK_FREE:
      if (value == null) {
        unsetDisk_free();
      } else {
        setDisk_free((Double)value);
      }
      break;

    case CPU_TOTAL:
      if (value == null) {
        unsetCpu_total();
      } else {
        setCpu_total((Double)value);
      }
      break;

    case MEMORY_TOTAL:
      if (value == null) {
        unsetMemory_total();
      } else {
        setMemory_total((Double)value);
      }
      break;

    case DISK_TOTAL:
      if (value == null) {
        unsetDisk_total();
      } else {
        setDisk_total((Double)value);
      }
      break;

    case TIME_STAMP:
      if (value == null) {
        unsetTime_stamp();
      } else {
        setTime_stamp((Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IP:
      return getIp();

    case CPU_FREE:
      return getCpu_free();

    case MEMORY_FREE:
      return getMemory_free();

    case DISK_FREE:
      return getDisk_free();

    case CPU_TOTAL:
      return getCpu_total();

    case MEMORY_TOTAL:
      return getMemory_total();

    case DISK_TOTAL:
      return getDisk_total();

    case TIME_STAMP:
      return getTime_stamp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IP:
      return isSetIp();
    case CPU_FREE:
      return isSetCpu_free();
    case MEMORY_FREE:
      return isSetMemory_free();
    case DISK_FREE:
      return isSetDisk_free();
    case CPU_TOTAL:
      return isSetCpu_total();
    case MEMORY_TOTAL:
      return isSetMemory_total();
    case DISK_TOTAL:
      return isSetDisk_total();
    case TIME_STAMP:
      return isSetTime_stamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof Agent)
      return this.equals((Agent)that);
    return false;
  }

  public boolean equals(Agent that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_cpu_free = true && this.isSetCpu_free();
    boolean that_present_cpu_free = true && that.isSetCpu_free();
    if (this_present_cpu_free || that_present_cpu_free) {
      if (!(this_present_cpu_free && that_present_cpu_free))
        return false;
      if (this.cpu_free != that.cpu_free)
        return false;
    }

    boolean this_present_memory_free = true && this.isSetMemory_free();
    boolean that_present_memory_free = true && that.isSetMemory_free();
    if (this_present_memory_free || that_present_memory_free) {
      if (!(this_present_memory_free && that_present_memory_free))
        return false;
      if (this.memory_free != that.memory_free)
        return false;
    }

    boolean this_present_disk_free = true && this.isSetDisk_free();
    boolean that_present_disk_free = true && that.isSetDisk_free();
    if (this_present_disk_free || that_present_disk_free) {
      if (!(this_present_disk_free && that_present_disk_free))
        return false;
      if (this.disk_free != that.disk_free)
        return false;
    }

    boolean this_present_cpu_total = true && this.isSetCpu_total();
    boolean that_present_cpu_total = true && that.isSetCpu_total();
    if (this_present_cpu_total || that_present_cpu_total) {
      if (!(this_present_cpu_total && that_present_cpu_total))
        return false;
      if (this.cpu_total != that.cpu_total)
        return false;
    }

    boolean this_present_memory_total = true && this.isSetMemory_total();
    boolean that_present_memory_total = true && that.isSetMemory_total();
    if (this_present_memory_total || that_present_memory_total) {
      if (!(this_present_memory_total && that_present_memory_total))
        return false;
      if (this.memory_total != that.memory_total)
        return false;
    }

    boolean this_present_disk_total = true && this.isSetDisk_total();
    boolean that_present_disk_total = true && that.isSetDisk_total();
    if (this_present_disk_total || that_present_disk_total) {
      if (!(this_present_disk_total && that_present_disk_total))
        return false;
      if (this.disk_total != that.disk_total)
        return false;
    }

    boolean this_present_time_stamp = true && this.isSetTime_stamp();
    boolean that_present_time_stamp = true && that.isSetTime_stamp();
    if (this_present_time_stamp || that_present_time_stamp) {
      if (!(this_present_time_stamp && that_present_time_stamp))
        return false;
      if (this.time_stamp != that.time_stamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetIp()) ? 131071 : 524287);
    if (isSetIp())
      hashCode = hashCode * 8191 + ip.hashCode();

    hashCode = hashCode * 8191 + ((isSetCpu_free()) ? 131071 : 524287);
    if (isSetCpu_free())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cpu_free);

    hashCode = hashCode * 8191 + ((isSetMemory_free()) ? 131071 : 524287);
    if (isSetMemory_free())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(memory_free);

    hashCode = hashCode * 8191 + ((isSetDisk_free()) ? 131071 : 524287);
    if (isSetDisk_free())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(disk_free);

    hashCode = hashCode * 8191 + ((isSetCpu_total()) ? 131071 : 524287);
    if (isSetCpu_total())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cpu_total);

    hashCode = hashCode * 8191 + ((isSetMemory_total()) ? 131071 : 524287);
    if (isSetMemory_total())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(memory_total);

    hashCode = hashCode * 8191 + ((isSetDisk_total()) ? 131071 : 524287);
    if (isSetDisk_total())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(disk_total);

    hashCode = hashCode * 8191 + ((isSetTime_stamp()) ? 131071 : 524287);
    if (isSetTime_stamp())
      hashCode = hashCode * 8191 + time_stamp;

    return hashCode;
  }

  @Override
  public int compareTo(Agent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetIp(), other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetCpu_free(), other.isSetCpu_free());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpu_free()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu_free, other.cpu_free);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetMemory_free(), other.isSetMemory_free());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemory_free()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memory_free, other.memory_free);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetDisk_free(), other.isSetDisk_free());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisk_free()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disk_free, other.disk_free);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetCpu_total(), other.isSetCpu_total());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpu_total()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu_total, other.cpu_total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetMemory_total(), other.isSetMemory_total());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemory_total()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memory_total, other.memory_total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetDisk_total(), other.isSetDisk_total());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisk_total()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disk_total, other.disk_total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTime_stamp(), other.isSetTime_stamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_stamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_stamp, other.time_stamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Agent(");
    boolean first = true;

    if (isSetIp()) {
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
    }
    if (isSetCpu_free()) {
      if (!first) sb.append(", ");
      sb.append("cpu_free:");
      sb.append(this.cpu_free);
      first = false;
    }
    if (isSetMemory_free()) {
      if (!first) sb.append(", ");
      sb.append("memory_free:");
      sb.append(this.memory_free);
      first = false;
    }
    if (isSetDisk_free()) {
      if (!first) sb.append(", ");
      sb.append("disk_free:");
      sb.append(this.disk_free);
      first = false;
    }
    if (isSetCpu_total()) {
      if (!first) sb.append(", ");
      sb.append("cpu_total:");
      sb.append(this.cpu_total);
      first = false;
    }
    if (isSetMemory_total()) {
      if (!first) sb.append(", ");
      sb.append("memory_total:");
      sb.append(this.memory_total);
      first = false;
    }
    if (isSetDisk_total()) {
      if (!first) sb.append(", ");
      sb.append("disk_total:");
      sb.append(this.disk_total);
      first = false;
    }
    if (isSetTime_stamp()) {
      if (!first) sb.append(", ");
      sb.append("time_stamp:");
      sb.append(this.time_stamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AgentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AgentStandardScheme getScheme() {
      return new AgentStandardScheme();
    }
  }

  private static class AgentStandardScheme extends org.apache.thrift.scheme.StandardScheme<Agent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Agent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CPU_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cpu_free = iprot.readDouble();
              struct.setCpu_freeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMORY_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.memory_free = iprot.readDouble();
              struct.setMemory_freeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISK_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.disk_free = iprot.readDouble();
              struct.setDisk_freeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CPU_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cpu_total = iprot.readDouble();
              struct.setCpu_totalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEMORY_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.memory_total = iprot.readDouble();
              struct.setMemory_totalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DISK_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.disk_total = iprot.readDouble();
              struct.setDisk_totalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TIME_STAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.time_stamp = iprot.readI32();
              struct.setTime_stampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Agent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ip != null) {
        if (struct.isSetIp()) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCpu_free()) {
        oprot.writeFieldBegin(CPU_FREE_FIELD_DESC);
        oprot.writeDouble(struct.cpu_free);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemory_free()) {
        oprot.writeFieldBegin(MEMORY_FREE_FIELD_DESC);
        oprot.writeDouble(struct.memory_free);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisk_free()) {
        oprot.writeFieldBegin(DISK_FREE_FIELD_DESC);
        oprot.writeDouble(struct.disk_free);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCpu_total()) {
        oprot.writeFieldBegin(CPU_TOTAL_FIELD_DESC);
        oprot.writeDouble(struct.cpu_total);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemory_total()) {
        oprot.writeFieldBegin(MEMORY_TOTAL_FIELD_DESC);
        oprot.writeDouble(struct.memory_total);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisk_total()) {
        oprot.writeFieldBegin(DISK_TOTAL_FIELD_DESC);
        oprot.writeDouble(struct.disk_total);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTime_stamp()) {
        oprot.writeFieldBegin(TIME_STAMP_FIELD_DESC);
        oprot.writeI32(struct.time_stamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AgentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AgentTupleScheme getScheme() {
      return new AgentTupleScheme();
    }
  }

  private static class AgentTupleScheme extends org.apache.thrift.scheme.TupleScheme<Agent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Agent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIp()) {
        optionals.set(0);
      }
      if (struct.isSetCpu_free()) {
        optionals.set(1);
      }
      if (struct.isSetMemory_free()) {
        optionals.set(2);
      }
      if (struct.isSetDisk_free()) {
        optionals.set(3);
      }
      if (struct.isSetCpu_total()) {
        optionals.set(4);
      }
      if (struct.isSetMemory_total()) {
        optionals.set(5);
      }
      if (struct.isSetDisk_total()) {
        optionals.set(6);
      }
      if (struct.isSetTime_stamp()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetCpu_free()) {
        oprot.writeDouble(struct.cpu_free);
      }
      if (struct.isSetMemory_free()) {
        oprot.writeDouble(struct.memory_free);
      }
      if (struct.isSetDisk_free()) {
        oprot.writeDouble(struct.disk_free);
      }
      if (struct.isSetCpu_total()) {
        oprot.writeDouble(struct.cpu_total);
      }
      if (struct.isSetMemory_total()) {
        oprot.writeDouble(struct.memory_total);
      }
      if (struct.isSetDisk_total()) {
        oprot.writeDouble(struct.disk_total);
      }
      if (struct.isSetTime_stamp()) {
        oprot.writeI32(struct.time_stamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Agent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cpu_free = iprot.readDouble();
        struct.setCpu_freeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.memory_free = iprot.readDouble();
        struct.setMemory_freeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.disk_free = iprot.readDouble();
        struct.setDisk_freeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cpu_total = iprot.readDouble();
        struct.setCpu_totalIsSet(true);
      }
      if (incoming.get(5)) {
        struct.memory_total = iprot.readDouble();
        struct.setMemory_totalIsSet(true);
      }
      if (incoming.get(6)) {
        struct.disk_total = iprot.readDouble();
        struct.setDisk_totalIsSet(true);
      }
      if (incoming.get(7)) {
        struct.time_stamp = iprot.readI32();
        struct.setTime_stampIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

